//Project Bueller WinMain 

#include <windows.h>
#include <iostream>
#include <time.h>
#include "DirectX.h"

using namespace std;

HWND window;
HWND HTPwindow;
HWND CastleWindow;
HWND Map;
HWND Battle;
HWND GameOver;

HDC device;
bool gameover = false;
int mouseX = 0;
int mouseY = 0;
POINT p1;
RECT button = {358, 409, 457, 449};

extern CSound *sound_menu;
extern CSound *sound_background;
extern CSound *sound_background2;
extern CSound *sound_enter;

LRESULT WINAPI WinProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)		//Window callback function
{
	switch (message) 
	{
	case WM_DESTROY:
		gameover = true;
		PostQuitMessage(0);
		break;

	case WM_LBUTTONDOWN:

		mouseX = (int)LOWORD(lParam);
		mouseY = (int)HIWORD(lParam);

		p1.x = mouseX;
		p1.y = mouseY + 35;

		if (PtInRect(&button, p1))
		{
			MessageBox(NULL,"Button cliked","Menu",MB_OK);
		}
		
		break;
	}
	return DefWindowProc(hWnd, message, wParam, lParam);
}

LRESULT WINAPI WinProcHowToPlay(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)		//Window callback function
{
	switch (message) 
	{
	case WM_DESTROY:
		gameover = true;
		PostQuitMessage(0);
		break;

	case WM_LBUTTONDOWN:

		mouseX = (int)LOWORD(lParam);
		mouseY = (int)HIWORD(lParam);

		p1.x = mouseX;
		p1.y = mouseY + 35;

		if (PtInRect(&button, p1))
		{
			MessageBox(NULL,"Button cliked","Menu",MB_OK);
		}
		
		break;
	}
	return DefWindowProc(hWnd, message, wParam, lParam);
}

ATOM MyRegisterClass(HINSTANCE hInstance)	//MyRegiserClass function sets program window properties
{
	WNDCLASSEX wc;
	wc.cbSize = sizeof(WNDCLASSEX); 
	wc.style         = CS_HREDRAW | CS_VREDRAW;
	wc.lpfnWndProc   = (WNDPROC)WinProc;
	wc.cbClsExtra     = 0;
	wc.cbWndExtra     = 0;
	wc.hInstance     = hInstance;
	wc.hIcon         = NULL;
	wc.hCursor       = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wc.lpszMenuName  = NULL;
	wc.lpszClassName = APPTITLE.c_str();
	wc.hIconSm       = NULL;

	//set up the window with the class info
	return RegisterClassEx(&wc);
}


BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)		//Helper function to create the window and refresh it
{
	//create a new window
	window = CreateWindow(
		APPTITLE.c_str(),        //window class
		APPTITLE.c_str(),        //title bar
		WS_OVERLAPPEDWINDOW,		//window style
		CW_USEDEFAULT,			//x position of window
		CW_USEDEFAULT,		    //y position of window
		800,						//width of the window
		600,						//height of the window
		NULL,					//parent window
		NULL,					//menu
		hInstance,				//application instance
		NULL);					//window parameters

	//was there an error creating the window?
	if (window == 0) return 0;

	//display the window
	ShowWindow(window, nCmdShow);
	UpdateWindow(window);

	//get device context for drawing
	device = GetDC(window);

	return 1;
}

//Entry point function
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
	MSG msg;
    ZeroMemory(&msg, sizeof(MSG));

	MyRegisterClass(hInstance);		//create window

	if (!InitInstance (hInstance, nCmdShow)) 
		return 0;

	if (!Game_Init(window))		//initialize the game
		return 0;

	while (!gameover)		// main message loop
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))		//process Windows events
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}

		Game_Run(window);		//process game loop
	}

	Game_End();		//free game resources
	return msg.wParam;
}
